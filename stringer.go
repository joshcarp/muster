package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/printer"
	"go/token"
	"go/types"
	"io/ioutil"
	"log"
	"os"
	"strings"
	"text/template"

	"github.com/iancoleman/strcase"
	"golang.org/x/tools/go/packages"
)

var (
	output = flag.String("output", "", "output file name; default srcdir/<file>_must.go")
)

// Usage is a replacement usage function for the flags package.
func Usage() {
	fmt.Fprintf(os.Stderr, "Usage of stringer:\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type T [directory]\n")
	fmt.Fprintf(os.Stderr, "\tstringer [flags] -type T files... # Must be a single package\n")
	fmt.Fprintf(os.Stderr, "For more information, see:\n")
	fmt.Fprintf(os.Stderr, "\thttps://pkg.go.dev/golang.org/x/tools/cmd/stringer\n")
	fmt.Fprintf(os.Stderr, "Flags:\n")
	flag.PrintDefaults()
}

func main() {
	log.SetFlags(0)
	log.SetPrefix("stringer: ")
	flag.Usage = Usage
	flag.Parse()
	var tags []string

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	// Parse the package once.
	g := Generator{}

	g.parsePackage(args, tags)

	// Print the header and package clause.

	// Run generate for each type.
	g.generate()

}

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.
type Generator struct {
	Pkg         *Package // Package we are scanning.
	Fset        *token.FileSet
	trimPrefix  string
	lineComment bool
}

// File holds a single parsed file and associated data.
type File struct {
	buf     bytes.Buffer // Accumulated output.
	pkg     *Package     // Package to which this file belongs.
	file    *ast.File    // Parsed AST.
	fset    *token.FileSet
	imports []string
}

type Package struct {
	Name  string
	defs  map[*ast.Ident]types.Object
	Files []*File
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func (g *Generator) parsePackage(patterns []string, tags []string) {
	cfg := &packages.Config{
		Mode: packages.LoadSyntax,
		// TODO: Need to think about constants in test files. Maybe write type_string_test.go
		// in a separate pass? For later.
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(tags, " "))},
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	g.addPackage(pkgs[0])
}

// addPackage adds a type checked Package and its syntax files to the generator.
func (g *Generator) addPackage(pkg *packages.Package) {

	g.Pkg = &Package{
		Name:  pkg.Name,
		defs:  pkg.TypesInfo.Defs,
		Files: make([]*File, len(pkg.Syntax)),
	}
	g.Fset = pkg.Fset
	for i, file := range pkg.Syntax {
		g.Pkg.Files[i] = &File{
			file: file,
			pkg:  g.Pkg,
			fset: pkg.Fset,
		}
	}
}

// generate produces the String method for the named type.
func (g *Generator) generate() {
	var out bytes.Buffer
	tmpl := `// Code generated by muster. DO NOT EDIT.
package {{.Pkg.Name}}
{{range $i, $e := .Pkg.Files}}
{{$e.Generate}}
{{end}}
`
	musttmpl := template.Must(template.New("").Parse(tmpl))
	err := musttmpl.Execute(&out, g)
	if err != nil {
		log.Println(err)
	}
	ioutil.WriteFile(g.Pkg.Name+"_must.go", formatCode(out.Bytes()), 0644)
}

// formatCode returns the gofmt-ed contents of the Generator's buffer.
func formatCode(buf []byte) []byte {
	src, err := format.Source(buf)
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		log.Printf("warning: internal error: invalid Go generated: %s", err)
		log.Printf("warning: compile the package to analyze the error")
		return buf
	}
	return src
}

func (f *File) Generate() string {
	ast.Inspect(f.file, f.genDecl)
	return f.buf.String()
}

// genDecl processes one declaration clause.
func (f *File) genDecl(node ast.Node) bool {
	decl, ok := node.(*ast.FuncDecl)
	if !ok {
		return true
	}
	if decl.Type == nil {
		return true
	}
	if decl.Type.Results == nil {
		return true
	}
	if len(decl.Type.Results.List) != 2 {
		return true
	}
	a := Function{Name: decl.Name.Name}
	for _, e := range decl.Type.Params.List {
		a.Params = append(a.Params, Param{
			Name: fmt.Sprintf("%s", e.Names[0].Name),
			Type: NodeAsString(f.fset, e.Type),
		})
	}
	for _, e := range decl.Type.Results.List {
		a.Returns = append(a.Returns, Return{
			Type: NodeAsString(f.fset, e.Type),
		})
	}
	if decl.Recv != nil && len(decl.Recv.List) > 0 {
		a.Recv.Type = NodeAsString(f.fset, decl.Recv.List[0].Type)
		a.Recv.Name = NodeAsString(f.fset, decl.Recv.List[0].Names[0])
	}
	var must Function
	switch a.IsExported() {
	case true:
		must.Name = "Must" + a.Name
	case false:
		must.Name = "must" + strcase.ToCamel(a.Name)
	}
	must.Returns = append(must.Returns, a.Returns[0])
	must.Params = a.Params
	must.Recv = a.Recv
	var err error
	must.Body, err = WithTemplate(
		`val, err := {{if ne .Recv.Name ""}}{{.Recv.Name}}.{{end}}{{.Name}}({{ range $i, $e := .Params }}{{$e.Name}}, {{end}})
	if err != nil {
		panic(err)
	}
	return val`, a)
	if err != nil {
		panic(err)
	}
	f.buf.Write([]byte(must.String()))
	return false
}

func NodeAsString(fset *token.FileSet, v interface{}) string {
	var b bytes.Buffer
	printer.Fprint(&b, fset, v)
	br := b.String()
	return br
}
